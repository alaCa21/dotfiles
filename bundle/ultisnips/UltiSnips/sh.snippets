
###########################################################################
#                            TextMate Snippets                            #
###########################################################################
snippet sh "cabeçalho bash" b
#!/bin/bash
# =================================================
#          CREATED: `!v strftime("%a %d/%b/%Y hs %H:%M")`
#      LAST CHANGE: `!v strftime("%a %d/%b/%Y hs %H:%M")`
# THIS SCRIPT AIMS: ${1:describe here}
#           AUTHOR: ${2:Sérgio Luiz Araújo Silva}
#             SITE: ${3:http://vivaotux.blogspot.com}
#          TWITTER: ${4:@voyeg3r}
#            SKYPE: sergioaraujosilva
# =================================================

${0}
endsnippet

snippet ifs "internal field separator" w
# how use it
# Var='1;2;3'
# IFS=\; read a b c d <<< "$Var"
OLDIFS=$IFS
${1:your_text}
IFS=$OLDIFS
endsnippet

snippet "here((doc)?umment)?" "here documment" r
	${1:cat} <<-EOF
	${2:# add your text here }
	EOF
endsnippet

snippet mkfiles "create 10 files" w
for i in {001..010}; do
    touch file-"${i}".txt
done
endsnippet

snippet alias
alias ${1:name}='${2:action}'
${0: c-j to jump}
endsnippet

snippet lower "lowcase var" w
${1:var}=${$1,,}

${0:# press c-j}
endsnippet

snippet upper "uppercase var" w
${1:var}=${$1^^}

${0:# press c-j}
endsnippet

snippet usage
usage()
{
	echo "Usage: $(basename $${1:0}) ${2:argument}"
	echo "${3:explanation}"
}

${0:# press c-j}
endsnippet

# snippet args "test se há argumentos" w
# `!v ${1:?"error: I need an argument"}`
#
# ${0}
# endsnippet


snippet lock
LOCK_FILE=/tmp/.lock
(set -C; :  > $LOCK_FILE) 2> /dev/null
if [  $? != "0" ];  then
  echo "Lock File exists - exiting"
   sleep 1
   exit 1
fi

${0:# press c-j}
endsnippet

snippet ir "if user is root" w
# testa se está logado como root
if [ "$(id -u)" != "0" ]; then
	echo "  Need be root"
	sleep 2
	exit  1
fi

${0}
endsnippet

snippet ifile "if file exists" w
if [ ! -e ${1:filename}  ]; then
	echo "  file $1 do not exists"
fi

${0}
endsnippet

snippet isempty "if file is empty" w
[ -f "${1:filename}" -a ! -s "$1" ] && echo "$1 is empty'!'"
${0:# press c-j to exit snippet}
endsnippet

snippet ifdir "test if dir exists" w
[ -d ${1:namedir} ] || mkdir $1 ; cd $1
endsnippet

snippet "ifprog(ram)?" "test if program is installed" r
command -v ${1:prog} >/dev/null || sudo apt-get install $1

${0:# press c-j}
endsnippet

snippet #!
#!/bin/sh

${0}
endsnippet

snippet !env "#!/usr/bin/env (!env)"
#!/usr/bin/env bash

${0}
endsnippet

snippet temp "Tempfile"
${1:TMPFILE}="$(mktemp -t ${2:`!p
snip.rv = re.sub(r'[^a-zA-Z]', '_', snip.fn) or "untitled"
`})"
${3:${4/(.+)/trap "/}${4:rm -f '$${1/.*\s//}'}${4/(.+)/" 0               # EXIT\n/}${5/(.+)/trap "/}${5:rm -f '$${1/.*\s//}'; exit 1}${5/(.+)/" 2       # INT\n/}${6/(.+)/trap "/}${6:rm -f '$${1/.*\s//}'; exit 1}${6/(.+)/" 1 15    # HUP TERM\n/}}

endsnippet

snippet case "case .. esac (case)"
case ${1:word} in
	${2:pattern} )
		$0;;
esac
endsnippet

snippet elif "elif .. (elif)"
elif ${2:[[ ${1:condition} ]]}; then
	${0:#statements}
endsnippet

snippet for "for ... done (for)"
for (( i = 0; i < ${1:10}; i++ )); do
	${0:#statements}
done
endsnippet

snippet forin "for ... in ... done (forin)" w
for ${1:i}${2/.+/ in /}${2:"$@"}; do
	${0:#statements}
done
endsnippet

#snippet here "here document (here)"
#<<-${2:'${1:TOKEN}'}
#	$0
#${1/['"`](.+)['"`]/$1/}
#endsnippet

snippet if "if ... then (if)"
if ${2:[[ ${1:condition} ]]}; then
	${0:#statements}
fi
endsnippet

snippet until "until ... (done)"
until ${2:[[ ${1:condition} ]]}; do
	${0:#statements}
done
endsnippet

snippet while "while ... (done)"
while ${2:[[ ${1:condition} ]]}; do
	${0:#statements}
done
endsnippet

snippet array "Create an array" w
${1:lista}=($(${2:ls}))
endsnippet

snippet unset "unset array element" w
unset ${1:name}[${#$1[*]}-1]
endsnippet

snippet forarray "interact with array elements" w
for i in "${${1:arrayname}[@]}"; do
	${2:action} $i
done
#${0: c-j to jump}
endsnippet


# vim:ft=snippets:
