" Arquivo de configuração do vim"{{{
" Criado: Qua 02/Ago/2006 hs 09:19
" Last Change: dom 11 dez 2016 12:02:06 BRT
" Autor: Sergio Luiz Araujo Silva
" Codificação: utf-8
" Site: http://vivaotux.blogspot.com
" Mail: voyeg3r  gmail
" Twitter: http://www.twitter.com/voyeg3r
" Licence: Licença: Este arquivo é de domínio público
" Garantia: O autor não se responsabiliza por eventuais danos
" causados pelo uso deste arquivo.
"my old vimrc:https://github.com/voyeg3r/dotfiles/blob/02b8a11b9f9e98c33d7290aea509004110305989/rcfiles/vim/vimrc
"
"
"                 ( O O )
"  +===========oOO==(_)==OOo==============+
"  |                                      |
"  |    °v°    Sergio Luiz Araujo Silva   |
"  |   /(_)\  Linux User #423493          |
"  |   ^ ^    voyeg3r   gmail.com        |
"  +======================================+"}}}

" if there is zsh use it"{{{
if executable('zsh')
    set shell=zsh\ -l
endif"}}}

" Plug bootstrap - Install Plug if it is not already installed"{{{
if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.dotfiles/rcfiles/vim/autoload/plug.vim --create-dirs
                \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall | source $MYVIMRC
endif"}}}

if !exists("*VimReloadFunction")"{{{
    fun! VimReloadFunction()
        " the idea for this function happened when I realized
        " that every time I reload vim it put the cursor at the
        " begginingbeggining of the file
        let save_cursor = getpos(".")
        let old_query = getreg('/')
        source $MYVIMRC
        call setpos('.', save_cursor)
        call setreg('/', old_query)
        execute "normal! zz"
    endfu
endif
com! ReloadVim call VimReloadFunction()"}}}"}}}

" nocompatible"{{{
if has('vim_starting')
  set nocompatible               " Be iMproved
endif"}}}

" we can open files in path just pressing gf"{{{
" http://www.hazaah.com/programming/textmate-and-vim/
" :find file
set path+=**
set rtp+=~/.fzf"}}}

" execute current line on shell"{{{
map <S-F12> :exec '!'.getline('.')<cr>"}}}

" this allows you to save files easier
noremap <CR> :

" FZF
" <C-p> or <C-t> to search files
nnoremap <silent> <C-t> :FZF -m<cr>
nnoremap <silent> <C-p> :FZF -m<cr>

" fold text object"{{{
" http://vim.wikia.com/wiki/Creating_new_text_objects
vnoremap af :<C-U>silent! normal! [zV]z<CR>
omap af :normal Vaf<CR>
set foldlevel=1
set fdm=marker"}}}

" select text you just pasted"{{{
" http://stackoverflow.com/questions/4312664/is-there-a-vim-command-to-select-pasted-text
" http://vimcasts.org/episodes/bubbling-text/
" o mapeamento abaixo permite reselecionar texto recem colado ou selecionado
nmap gV `[v`]"}}}

" some command line Abbreviations"{{{
cab W  w
cab Wq wq
cab Q  q"}}}

" Use fuzzy completion relative filepaths across directory
imap <expr> <c-x><c-f> fzf#vim#complete#path('git ls-files $(git rev-parse --show-toplevel)')

" Better command history with q:"{{{
command! CmdHist call fzf#vim#command_history({'right': '40'})
nnoremap q: :CmdHist<CR>"}}}

" Better search history"{{{
command! QHist call fzf#vim#search_history({'right': '40'})
nnoremap q/ :QHist<CR>"}}}

" fzf configuration"{{{
let g:fzf_action = {
      \ 'ctrl-s': 'split',
      \ 'ctrl-v': 'vsplit'
      \ }
nnoremap <c-p> :FZF<cr>"}}}

" some ripgrep settings"{{{
" --column: Show column number
" --line-number: Show line number
" --no-heading: Do not show file headings in results
" --fixed-strings: Search term as a literal string
" --ignore-case: Case insensitive search
" --no-ignore: Do not respect .gitignore, etc...
" --hidden: Search hidden files and folders
" --follow: Follow symlinks
" --glob: Additional conditions for search (in this case ignore everything in the .git/ folder)
" --color: Search color options

command! -bang -nargs=* Find call fzf#vim#grep('rg --column --line-number --no-heading --fixed-strings --ignore-case --no-ignore --hidden --follow --glob "!.git/*" --color "always" '.shellescape(<q-args>), 1, <bang>0)

command! -bang -nargs=* Rg
            \ call fzf#vim#grep(
            \   'rg --column --line-number --no-heading --color=always '.shellescape(<q-args>), 1,
            \   <bang>0 ? fzf#vim#with_preview('up:60%')
            \           : fzf#vim#with_preview('right:50%:hidden', '?'),
            \   <bang>0)"}}}

" Required to start Plug:"{{{
call plug#begin(expand('~/.dotfiles/rcfiles/vim/bundle'))

"**************************************************************************
"" Plug install packages
"**************************************************************************
Plug 'sjl/gundo.vim'
Plug 'kana/vim-textobj-user'
Plug 'kana/vim-textobj-line'            | Plug 'kana/vim-textobj-user'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'chrisbra/NrrwRgn'
Plug 'ryanoasis/vim-webdevicons'
Plug 'https://github.com/ryanoasis/vim-devicons'
Plug 'vim-scripts/AutoComplPop'
Plug 'scrooloose/nerdtree'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'vim-scripts/grep.vim'
Plug 'rking/ag.vim'
Plug 'eparreno/vim-l9'
Plug 'terryma/vim-multiple-cursors'

let g:make = 'gmake'
if system('uname -o') =~ '^GNU/'
        let g:make = 'make'
endif

Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'

Plug 'vimwiki/vimwiki'
Plug 'vim-scripts/VisIncr'
Plug 'haya14busa/incsearch.vim'
Plug 'rhysd/clever-f.vim'

"" Color
Plug 'tomasr/molokai'

"***************************************************************************
"" Custom bundles
"***************************************************************************

" html
"" HTML Bundle
Plug 'amirh/HTML-AutoCloseTag'
Plug 'hail2u/vim-css3-syntax'
Plug 'gorodinskiy/vim-coloresque'
Plug 'tpope/vim-haml'
Plug 'mattn/emmet-vim'

" python
"" Python Bundle
Plug 'davidhalter/jedi-vim'

call plug#end()"}}}

" settings for incsearch plugin"{{{
map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)"}}}

" text-object uri open"{{{
" nmap gx mxviugx<Esc>`x
" Use whole "words" when opening URLs.
" This avoids cutting off parameters (after '?') and anchors (after '#').
" See http://vi.stackexchange.com/q/2801/1631
let g:netrw_gx="<cWORD>""}}}

" Required:
filetype plugin indent on

" index do vim wiki
let g:vimwiki_list = [{'path': '~/.dotfiles/rcfiles/vim/wiki', 'index': 'main'}]

" Basic Setup"{{{
set encoding=utf-8
set fileencoding=utf-8
set fileencodings=utf-8
set bomb
set binary
set backspace=indent,eol,start
set tabstop=4
set softtabstop=0
set shiftwidth=4
set expandtab
set hidden
set hlsearch
set incsearch
set ignorecase
set smartcase
set nobackup
set noswapfile
set fileformats=unix,dos,mac
set showcmd
set listchars=trail:·,precedes:«,extends:»,eol:↲,tab:▸\ "}}}

" Visual Settings"{{{
syntax on
set ruler
set number

let no_buffers_menu=1
if !exists('g:not_finish_vimplug')
  colorscheme molokai
endif

set mousemodel=popup

" enable mouse
set mouse=a
set t_Co=256
set guioptions=egmrti
set gfn=Monospace\ 10

"" Disable the blinking cursor.
set gcr=a:blinkon0
set scrolloff=3

"" Status bar
set laststatus=2

"" Use modeline overrides
set modeline
set modelines=10

set title
set titleold="Terminal"
set titlestring=%F

set statusline=%F%m%r%h%w%=(%{&ff}/%Y)\ (line\ %l\/%L,\ col\ %c)\

if exists("*fugitive#statusline")
  set statusline+=%{fugitive#statusline()}
endif

" vim-airline
let g:airline_theme = 'powerlineish'
let g:airline#extensions#syntastic#enabled = 1
let g:airline#extensions#branch#enabled = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tagbar#enabled = 1
let g:airline_skip_empty_sections = 1"}}}

" Highlight redundant whitespace and tabs."{{{
" This has the advantage of not highlighting each space you type at
" the end of the line, only when you open a file or leave insert
" mode. Very neat."
highlight ExtraWhitespace ctermbg=red guibg=red
au ColorScheme * highlight ExtraWhitespace guibg=red
au BufEnter * match ExtraWhitespace /\s\+$/
au InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
au InsertLeave * match ExtraWhiteSpace /\s\+$/

" Create a red/red scheme
highlight Problem ctermbg=red guibg=red
" Highlight leading tabs - tab misturado com espaço
match Problem /^\s\*\t\+\s\*/"}}}

" more command line Abbreviations"{{{
cnoreabbrev W! w!
cnoreabbrev Q! q!
cnoreabbrev Qall! qall!
cnoreabbrev Wq wq
cnoreabbrev Wa wa
cnoreabbrev wQ wq
cnoreabbrev WQ wq
cnoreabbrev W w
cnoreabbrev Q q
cnoreabbrev Qall qall"}}}

"" NERDTree configuration"{{{
let g:NERDTreeChDirMode=2
let g:NERDTreeIgnore=['\.rbc$', '\~$', '\.pyc$', '\.db$', '\.sqlite$', '__pycache__']
let g:NERDTreeSortOrder=['^__\.py$', '\/$', '*', '\.swp$', '\.bak$', '\~$']
let g:NERDTreeShowBookmarks=1
let g:nerdtree_tabs_focus_on_files=1
let g:NERDTreeMapOpenInTabSilent = '<RightMouse>'
let g:NERDTreeWinSize = 50
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.pyc,*.db,*.sqlite
nnoremap <silent> <F2> :NERDTreeFind<CR>
noremap <F3> :NERDTreeToggle<CR>"}}}

set rnu nu

" join lines keeping cursor position"{{{
" source: http://stackoverflow.com/questions/9505198/join-two-lines-in-vim-without-moving-cursor
nnoremap <silent> J :let p=getpos('.')<bar>join<bar>call setpos('.', p)<cr>"}}}

" executes current line on shell
map <S-F12> :exec '!'.getline('.')<cr>

"  when searching next patter put it in the middle of screen"{{{
nnoremap n nzz
nmap * *zz
nmap # #zz
nmap g* g*zz
nmap g# g#zz"}}}

" :h g:incsearch#auto_nohlsearch"{{{
set hlsearch
let g:incsearch#auto_nohlsearch = 1
map n  <Plug>(incsearch-nohl-n)
map N  <Plug>(incsearch-nohl-N)
map *  <Plug>(incsearch-nohl-*)
map #  <Plug>(incsearch-nohl-#)
map g* <Plug>(incsearch-nohl-g*)
map g# <Plug>(incsearch-nohl-g#)"}}}

" asteris now keeps its position
nnoremap <leader>* *``cgn
nnoremap <leader># #``cgN

augroup sh"{{{
    au BufNewFile *.sh 0r ~/.vim/skel/template.sh
    au BufNewFile *.sh exe "1," . 10 . "s/Creation Date:.*/Creation Date:    " .strftime("%d-%m-%Y")
    "au BufWritePost *.sh :silent !chmod a+x <afile>
augroup end"}}}

augroup zsh "{{{
    au BufNewFile *.zsh 0r ~/.vim/skel/template.zsh
    au BufNewFile *.zsh exe "1," . 10 . "s/Creation Date:.*/Creation Date:    " .strftime("%d-%m-%Y")
    au BufWritePost *.zsh :silent !chmod a+x <afile>
augroup end "}}}

"" autocomandos para python"{{{
augroup python
    au FileType python set keywordprg=pydoc
    au! BufRead *.py setlocal smartindent cinwords=if,elif,else,for,while,try,except,finally,def,class
    au! BufRead,Bufnewfile *.py im :<CR> :<CR><TAB>
    au! BufWritePre *.py,*.js,*.sh :call <SID>CleanExtraSpacesFunction()
    au! BufNewFile *.py 0r ~/.vim/skel/template.py
    au BufNewFile *.py exe "1," . 10 . "s/Creation Date:.*/Creation Date:    " .strftime("%d-%m-%Y")
    au! BufWritePost *.py :silent !chmod a+x <afile>
    autocmd FileType python set textwidth=79
    autocmd FileType python filetype indent on
    let python_highlight_all=1
    let python_highlight_builtins=0
    let python_highlight_builtins=1
    let python_highlight_exceptions=1
    let python_highlight_numbers=1
    let python_highlight_space_errors=1
augroup end"}}}

augroup html"{{{
    " au! <--> Remove all html autocommands
    au!
    au BufNewFile,BufRead *.html,*.shtml,*.htm set ft=html
    "au BufNewFile,BufRead,BufEnter  *.html,*.shtml,*.htm so ~/.vim/skel/skel.html
    au BufNewFile *.html 0r ~/.vim/skel/skel.html | let IndentStyle = "html"
    "au BufNewFile *.html,*.shtml,*.htm /body/+
    au BufNewFile,BufRead *.html,*.shtml,*.htm set noautoindent
    au BufNewFile,BufRead *.html,*.shtml,*.htm set nolist
    au BufNewFile,BufRead *.html,*.shtml,*.htm call LastModified()
    " needed one line with 'Created:' in firsts 5 lines
    "au Bufnewfile,BufRead *.html,*.shtml,*.htm 1,5s/\s*Created:\s*\zs.*/\="" . strftime("%Y %b %d %X")/ge
    au BufNewFile,BufRead *.html,*.shtml,*.htm exe "1," . 10 . "s/Creation Date:.*/Creation Date:    " .strftime("%d-%m-%Y")
augroup end"}}}

augroup css"{{{
    au Bufnewfile,BufRead *.css set ft=css
    au BufNewFile *.css 0r ~/.vim/skel/template.css
    autocmd FileType css set omnifunc=csscomplete#CompleteCSS
    "au BufNewFile *.css exe "1," . 10 . "s/Creation Date:.*/Creation Date:    " .strftime("%d-%m-%Y")
    au BufNewFile *.css exe "1," . 10 . "s/Creation Date:.*/Creation Date: " .strftime("%c")
augroup end"}}}

augroup tex"{{{
    au Bufnewfile,BufRead *.tex set ft=tex
    au BufNewFile *.tex 0r ~/.vim/skel/template.tex
    au BufNewFile *.tex exe "1," . 10 . "s/Creation Date:.*/Creation Date: " .strftime("%c")
    vmap e <tab>em<tab>
    vmap ' <tab>'<tab>
    iab latex \LaTeX\
    normal gg
augroup end"}}}

" omnifunc settings"{{{
if has("autocmd") && exists("+omnifunc")
    autocmd Filetype *
                \  if &omnifunc == "" |
                \  setlocal omnifunc=syntaxcomplete#Complete |
                \ endif
endif"}}}

" select last paste in visual mode
nnoremap <expr> gb '`[' . strpart(getregtype(), 0, 1) . '`]'

" grep.vim"{{{
nnoremap <silent> <leader>f :Rgrep<CR>
let Grep_Default_Options = '-IR'
let Grep_Skip_Files = '*.log *.db'
let Grep_Skip_Dirs = '.git node_modules'"}}}

" supertab completion"{{{
function! SuperTab()
    if (strpart(getline('.'),col('.')-2,1)=~'^\W\?$')
        return "\<Tab>"
    else
        return "\<C-n>"
    endif
endfunction
imap <Tab> <C-R>=SuperTab()<CR>"}}}

"" set wrapping"{{{
if !exists('*s:setupWrapping')
  function s:setupWrapping()
    set wrap
    set wm=2
    set textwidth=79
  endfunction
endif"}}}

" this function gets last 20 cmds to new buffer"{{{
fun! s:RedirHistoryCommands()
    set paste
    redir @r
    history : -20,
    redir End
    new
    put r
    set nopaste
endfun
command! -nargs=0 GetHistory call s:RedirHistoryCommands()"}}}

" Esta função insere um change log"{{{
" se nelas não houver "Last Change" ele passa batido
" ou seja não insere o cabeçalho
" usr_41.txt
fun! InsertChangeLog()
  let l:flag=0
  for i in range(1,5)
    if getline(i) !~ '.*Last Change.*'
      let l:flag = l:flag + 1
    endif
  endfor
  if l:flag >= 5
    normal(1G)
    call append(0, "Arquivo: <+Description+>")
    call append(1, "Criado: " . strftime("%a %d/%b/%Y hs %H:%M"))
    call append(2, "Last Change: " . strftime("%a %d/%b/%Y hs %H:%M"))
    call append(3, "autor: <+digite seu nome+>")
    call append(4, "site: <+digite o endereço de seu site+>")
    call append(5, "twitter: <+your twitter here+>")
    call append(6, "email: <+seu email+>")
    normal gg
  endif
endfun"}}}

" Esta função Modifica o change log"{{{
" If buffer modified, update any 'Last modified: ' in the first 20 lines.
" 'Last modified: ' can have up to 10 characters before (they are retained).
" Restores cursor and window position using save_cursor variable.
" source: http://vim.wikia.com/wiki/Insert_current_date_or_time
function! LastModified()
    if &modified
        let save_cursor = getpos(".")
        let old_query = getreg('/')
        keepjumps exe  '1,10s/Change:.*/Change: ' . strftime('%c') . '/e'
        call setpos('.', save_cursor)
        call setreg('/', old_query)
    endif
endfun
autocmd BufWritePre * :call Preserve(LastModified())
map <silent> <F9> <esc>:call Preserve(LastModified())<cr>"}}}

" jump to next place holder"{{{
function! JumpToNextPlaceholder()
    let old_query = getreg('/')
    echo search("<+.\\++>")
    exec "norm! c/+>/e\<CR>"
    call setreg('/', old_query)
endfunction
autocmd BufNewFile * :call LoadFileTemplate()
nnoremap <special> <leader>j :keepjumps call JumpToNextPlaceholder()<CR>a
inoremap <special> <leader>j <ESC>:keepjumps call JumpToNextPlaceholder()<CR>a"}}}

" Toggle 0 and ^"{{{
" source: http://ddrscott.github.io/blog/2016/vim-toggle-movement/
function! ToggleHomeZero()
    let pos = getpos('.')
    execute "normal! ^"
    if pos == getpos('.')
        execute "normal! 0"
    endif
endfunction
nnoremap 0 :call ToggleHomeZero()<CR>"}}}

" The function must be used in a piece of subtitles"{{{
" in order to clean it, join the lines and put the results
" on clipboard to be pasted on anki
fun! CleanSubtitles()
    let old_query = getreg('/')
    :g/^\(\s\+\)\=\d\+$/d
    :g/^\(\s\+\)\=\d\+.*-->\s\d[^,]*,\d\d\d$/d
    :%j
    :%s/,/, /g
    :%s,\s\+, ,g
    :%y+
    call setreg('/', old_query)
endfun
command! -nargs=0 GetSubs :call CleanSubtitles()"}}}

" auto clean trailing spaces"{{{
if has("autocmd")
    autocmd BufWritePre *.txt,*.js,*.py,*.wiki,*.sh :call CleanExtraSpaces()
endif"}}}

" Utility function that save last search and cursor position"{{{
" http://technotales.wordpress.com/2010/03/31/preserve-a-vim-function-that-keeps-your-state/
" video from vimcasts.org: http://vimcasts.org/episodes/tidying-whitespace
function! Preserve(command)
    " Preparation: save last search, and cursor position.
    let save_cursor = getpos(".")
    let old_query = getreg('/')
    execute a:command
    " Clean up: restore previous search history, and cursor position
    call setpos('.', save_cursor)
    call setreg('/', old_query)
endfunction"}}}

"    dos2unix ^M"{{{
fun! Dos2unixFunction()
    call Preserve("%s/$//g")
    set ff=unix
    set bomb
    set encoding=utf-8
    set fileencoding=utf-8
endfun
com! Dos2Unix call Dos2unixFunction()"}}}

" one liner rename file"{{{
" source: http://stackoverflow.com/questions/1205286/renaming-the-current-file-in-vim
command! -nargs=1 Rename try | saveas <args> | call delete(expand('#')) | bd # | endtry"}}}

" remove consecutive blank lines"{{{
" see Preserve function definition
fun! DelBlank()
    "call Preserve("g/^\\n\\{2,}/d")
    keepjumps call Preserve("g/^$/,/./-j")
endfun"}}}

" delete sucessive blank lines and trailing spces"{{{
map <special> <leader>d :call Preserve(DelBlank())<cr>
nmap _$ :call Preserve("%s/\\s\\+$//e")<CR>
nmap _= :call Preserve("normal gg=G")<CR>"}}}

fun! CleanExtraSpaces()"{{{
    call Preserve("%s/\\s\\+$//e")
endfun
com! Cls :call Preserve("%s/\\s\\+$//e")<CR>"}}}

" ************************ End functions *****************

set nopaste
nnoremap <F2> :set invpaste paste?<CR>
set pastetoggle=<F2>
set showmode
" source hacking-vim p-138
nnoremap p p=`]
nnoremap <c-p> p

nnoremap <F5> :GundoToggle<CR>

" toggle hightli

" move vertically by visual line
nnoremap j gj
nnoremap k gk

" Sudo to write"{{{
cmap w!! w !sudo tee % >/dev/null
command! SaveAsRoot w !sudo tee %"}}}

" map <S-F12> <esc>:dig<cr> " mostra os digrafos do tipo Word®"{{{
" togle between number nonumber and relativenumber
" source: http://stackoverflow.com/questions/4387210/vim-how-to-map-two-tasks-under-one-shortcut-key"}}}

" to reselect use gv in normal mode"{{{
nnoremap <S-F11> <ESC>:set hls!<cr>
inoremap <S-F11> <C-o>:set hls!<cr>
vnoremap <S-F11> <ESC>:set hls!<cr> <bar> gv
"nnoremap / :set hls<cr>/
" desativar o hightlight search
nnoremap <leader>h :set hls!<cr>"}}}

" make copying from visual selection more sane
" source: http://ddrscott.github.io/blog/2016/yank-without-jank/
vnoremap <expr>y "my\"" . v:register . "y`y"

" make p in Visual mode replace the selected text with the yank register
vnoremap p <Esc>:let current_reg = @"<CR>gvdi<C-R>=current_reg<CR><Esc>

" Buble single lines - mover linhas"{{{
" http://vimcasts.org/episodes/bubbling-text/
"nmap <special> <c-up> ddkP
"nmap <special> <c-down> ddp
"buble multiple lines
"xmap <c-up> xkP`[V`]
"xmap <c-down> xp`[V`]"}}}

"" Autocmd Rules

"" The PC is fast enough, do syntax highlight syncing from start"{{{
augroup vimrc-sync-fromstart
  autocmd!
  autocmd BufEnter * :syntax sync fromstart
augroup END"}}}

"" Remember cursor position"{{{
augroup vimrc-remember-cursor-position
  autocmd!
  autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"" | endif
augroup END"}}}

" txt wrap setting"{{{
augroup vimrc-wrapping
  autocmd!
  autocmd BufRead,BufNewFile *.txt call s:setupWrapping()
augroup END"}}}

"" make/cmake"{{{
augroup vimrc-make-cmake
  autocmd!
  autocmd FileType make setlocal noexpandtab
  autocmd BufNewFile,BufRead CMakeLists.txt setlocal filetype=cmake
augroup END"}}}

set autoread

map <silent> <leader>v :e ~/.vimrc<cr>
map <silent> <leader>z :e ~/.zshrc<cr>

"" Git stuff"{{{
noremap <Leader>ga :Gwrite<CR>
noremap <Leader>gc :Gcommit<CR>
noremap <Leader>gsh :Gpush<CR>
noremap <Leader>gll :Gpull<CR>
noremap <Leader>gs :Gstatus<CR>
noremap <Leader>gb :Gblame<CR>
noremap <Leader>gd :Gvdiff<CR>
noremap <Leader>gr :Gremove<CR>"}}}

nnoremap <silent> <leader>O :pu! _<cr>:']+1<cr>
nnoremap <silent> <leader>o :pu _<cr>:'[-1<cr>

if exists('+autochdir')
    set autochdir
else
    autocmd BufEnter * silent! lcd %:p:h:gs/ /\\ /
endif
"autocmd BufEnter * lcd %:p:h

" mapeamento para abrir e fechar folders em modo normal usando"{{{
" a barra de espaços -- zR abre todos os folders
nnoremap <space> @=((foldclosed(line('.')) < 0) ? 'zc' : 'zo')<CR>"}}}

"" Tabs
nnoremap <Tab> gt
nnoremap <S-Tab> gT
nnoremap <silent> <S-t> :tabnew<CR>

"" Set working directory
nnoremap <leader>. :lcd %:p:h<CR>

"" Opens an edit command with the path of the currently edited file filled in
noremap <Leader>e :e <C-R>=expand("%:p:h") . "/" <CR>

"" Opens a tab edit command with the path of the currently edited file filled
noremap <Leader>te :tabe <C-R>=expand("%:p:h") . "/" <CR>

" snippets settings"{{{
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<c-b>"
let g:UltiSnipsEditSplit="vertical""}}}

" Tagbar
nmap <silent> <F4> :TagbarToggle<CR>
let g:tagbar_autofocus = 1

" Disable visualbell
set noerrorbells visualbell t_vb=
if has('autocmd')
  autocmd GUIEnter * set visualbell t_vb=
endif

"" Copy/Paste/Cut
if has('unnamedplus')
  set clipboard=unnamed,unnamedplus
endif

noremap YY "+y<CR>
noremap <leader>p "+gP<CR>
noremap XX "+x<CR>

" use leader to interact with the system clipboard
nnoremap <Leader>p "*]p
nnoremap <Leader>P "*]P

nnoremap <Leader>y :y*<cr>
nnoremap <Leader>c ^"*c$
nnoremap <Leader>d ^"*d$

vnoremap <Leader>y "*y
vnoremap <Leader>c "*c
vnoremap <Leader>d "*d

if has('macunix')
  " pbcopy for OSX copy/paste
  vmap <C-x> :!pbcopy<CR>
  vmap <C-c> :w !pbcopy<CR><CR>
endif

" mappings for Switching windows"{{{
noremap <C-j> <C-w>j
noremap <C-k> <C-w>k
noremap <C-l> <C-w>l
noremap <C-h> <C-w>h"}}}

" Identação de textos e códigos com o TAB no modo visual"{{{
" URL: http://gustavodutra.com/post/72/
"               \ dicas-de-movimentacao-e-identacao-no-gvim/
vnoremap < <gv
vnoremap > >gv
vmap  <TAB> >
vmap  <S-TAB> <
imap <S-TAB> <ESC><<i"}}}

"" Move visual block
vnoremap J :m '>+1<CR>gv=gv
vnoremap K :m '<-2<CR>gv=gv


" Make the dot command work as expected in visual mode (via
" https://www.reddit.com/r/vim/comments/3y2mgt/do_you_have_any_minor_customizationsmappings_that/cya0x04)
vnoremap . :norm.<CR>

"" Open current line on GitHub
nnoremap <Leader>o :.Gbrowse<CR>

"***************************************************************************
"" Custom configs
"***************************************************************************

" html
" for html files, 2 spaces
autocmd Filetype html setlocal ts=2 sw=2 expandtab

" python"{{{
" vim-python
augroup vimrc-python
  autocmd!
  autocmd FileType python setlocal expandtab shiftwidth=4 tabstop=8 colorcolumn=79
      \ formatoptions+=croq softtabstop=4 smartindent
      \ cinwords=if,elif,else,for,while,try,except,finally,def,class,with
augroup END"}}}

" jedi-vim"{{{
let g:jedi#popup_on_dot = 0
let g:jedi#goto_assignments_command = "<leader>g"
let g:jedi#goto_definitions_command = "<leader>d"
let g:jedi#documentation_command = "K"
let g:jedi#usages_command = "<leader>n"
let g:jedi#rename_command = "<leader>r"
let g:jedi#show_call_signatures = "0"
let g:jedi#completions_command = "<C-Space>"
let g:jedi#smart_auto_mappings = 0"}}}

" syntastic
let g:syntastic_python_checkers=['python', 'flake8']

" vim-airline
let g:airline#extensions#virtualenv#enabled = 1

"" Include user's local vim config
if filereadable(expand("~/.config/nvimrc.local"))
  source ~/.config/nvimrc.local
endif


" vim-airline"{{{
if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif

if !exists('g:airline_powerline_fonts')
  let g:airline#extensions#tabline#left_sep = ' '
  let g:airline#extensions#tabline#left_alt_sep = '|'
  let g:airline_left_sep          = '▶'
  let g:airline_left_alt_sep      = '»'
  let g:airline_right_sep         = '◀'
  let g:airline_right_alt_sep     = '«'
  let g:airline#extensions#branch#prefix     = '⤴' "➔, ➥, ⎇
  let g:airline#extensions#readonly#symbol   = '⊘'
  let g:airline#extensions#linecolumn#prefix = '¶'
  let g:airline#extensions#paste#symbol      = 'ρ'
  let g:airline_symbols.linenr    = '␊'
  let g:airline_symbols.branch    = '⎇'
  let g:airline_symbols.paste     = 'ρ'
  let g:airline_symbols.paste     = 'Þ'
  let g:airline_symbols.paste     = '∥'
  let g:airline_symbols.whitespace = 'Ξ'
else
  let g:airline#extensions#tabline#left_sep = ''
  let g:airline#extensions#tabline#left_alt_sep = ''

  " powerline symbols
  let g:airline_left_sep = ''
  let g:airline_left_alt_sep = ''
  let g:airline_right_sep = ''
  let g:airline_right_alt_sep = ''
  let g:airline_symbols.branch = ''
  let g:airline_symbols.readonly = ''
  let g:airline_symbols.linenr = ''
endif"}}}

