" Arquivo de configuração do vim
" Criado: Qua 02/Ago/2006 hs 09:19
" Last Change: ter 29 nov 2016 14:14:26 BRT
" Autor: Sergio Luiz Araujo Silva
" Codificação: utf-8
" Site: http://vivaotux.blogspot.com
" Mail: voyeg3r  gmail
" Twitter: http://www.twitter.com/voyeg3r
" Licence: Licença: Este arquivo é de domínio público
" Garantia: O autor não se responsabiliza por eventuais danos
" causados pelo uso deste arquivo.
"
"
"
"                 ( O O )
"  +===========oOO==(_)==OOo==============+
"  |                                      |
"  |    °v°    Sergio Luiz Araujo Silva   |
"  |   /(_)\  Linux User #423493          |
"  |   ^ ^    voyeg3r   gmail.com        |
"  +======================================+

" Plug bootstrap - Install Plug if it is not already installed
if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.dotfiles/rcfiles/vim/autoload/plug.vim --create-dirs
                \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall | source $MYVIMRC
endif

colo molokai

" autoload vimrc
augroup reload_vimrc
    autocmd!
    autocmd BufWritePost $MYVIMRC source $MYVIMRC
augroup END

" config for silversearcher ag
" "let g:agprg="ag --column"
" let g:ackprg = 'ag --nogroup --nocolor --column'

filetype off

call plug#begin('~/.dotfiles/rcfiles/vim/bundle')

"Plug 'Raimondi/delimitMate'
Plug 'jiangmiao/auto-pairs'
Plug 'vim-syntastic/syntastic'
Plug 'terryma/vim-expand-region'
Plug 'chrisbra/NrrwRgn'
Plug 'vim-scripts/AutoComplPop'
Plug 'ryanoasis/vim-webdevicons'
Plug 'rking/ag.vim'
Plug 'sjl/gundo.vim'
Plug 'tmhedberg/matchit'
Plug 'scrooloose/nerdtree'"
Plug 'chrisbra/NrrwRgn'
"Plug 'rstacruz/sparkup'
Plug 'mattn/emmet-vim'
Plug 'godlygeek/tabular'
Plug 'tpope/vim-abolish'
Plug 'vim-airline/vim-airline-themes'
Plug 'vim-airline/vim-airline'
Plug 'eparreno/vim-l9'
Plug 'terryma/vim-multiple-cursors'
Plug 'tpope/vim-repeat'
Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'
Plug 'mattn/webapi-vim' | Plug 'christoomey/vim-quicklink'
Plug 'tpope/vim-surround'
Plug 'vimwiki/vimwiki'
Plug 'vim-scripts/VisIncr'
Plug 'wellle/targets.vim'
Plug 'haya14busa/incsearch.vim'
Plug 'rhysd/clever-f.vim'
Plug 'FelikZ/ctrlp-py-matcher'
Plug 'kien/ctrlp.vim'
Plug 'skywind3000/asyncrun.vim'

"function! BuildYCM(info)
"    if a:info.status == 'installed' || a:info.force
"        !./install.py
"    endif
"endfunction
"Plug 'Valloric/YouCompleteMe', { 'do': function('BuildYCM') }


" Color themes
Plug 'yosiat/oceanic-next-vim'
Plug 'altercation/vim-colors-solarized'
Plug 'duythinht/inori'
Plug 'wesgibbs/vim-irblack'
Plug 'morhetz/gruvbox'
Plug 'alessandroyorba/despacio'
Plug 'jacoborus/tender.vim'

filetype plugin indent on    " required


" All of your Plugins must be added before the following line
" Add plugins to &runtimepath
call plug#end()

" mapping for incsearch plugin
nnoremap <Esc><Esc> :<C-u>nohlsearch<CR>
map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)

" incsearch plugin
" :h g:incsearch#auto_nohlsearch
set hlsearch
let g:incsearch#auto_nohlsearch = 1
let g:incsearch#magic = '\v'
map n  <Plug>(incsearch-nohl-n)
map N  <Plug>(incsearch-nohl-N)
map *  <Plug>(incsearch-nohl-*)
map #  <Plug>(incsearch-nohl-#)
map g* <Plug>(incsearch-nohl-g*)
map g# <Plug>(incsearch-nohl-g#)

if v:version > 703 || v:version == 703 && has("patch541")
    set formatoptions+=j " Delete comment character when joining commented lines
endif
"
" Esta função testa as 5 primeiras linhas do arquivo
" se nelas não houver "Last Change" ele passa batido
" ou seja não insere o cabeçalho
" usr_41.txt
fun! InsertChangeLog()
  let l:flag=0
  for i in range(1,5)
    if getline(i) !~ '.*Last Change.*'
      let l:flag = l:flag + 1
    endif
  endfor
  if l:flag >= 5
    normal(1G)
    call append(0, "Arquivo: <+Description+>")
    call append(1, "Criado: " . strftime("%a %d/%b/%Y hs %H:%M"))
    call append(2, "Last Modified: " . strftime("%a %d/%b/%Y hs %H:%M"))
    call append(3, "autor: <+digite seu nome+>")
    call append(4, "site: <+digite o endereço de seu site+>")
    call append(5, "twitter: <+your twitter here+>")
    call append(6, "email: <+seu email+>")
    normal gg
  endif
endfun

" If buffer modified, update any 'Last modified: ' in the first 20 lines.
" 'Last modified: ' can have up to 10 characters before (they are retained).
" Restores cursor and window position using save_cursor variable.
" source: http://vim.wikia.com/wiki/Insert_current_date_or_time
function! LastModified()
    if &modified
        let pos = winsaveview()
        let _s=@/
        "let save_cursor = getpos(".")
        let n = min([20, line("$")])
        keepjumps silent! exe '1,' . n . 'keepjumps s#^\(.\{,10}Last Change: \).*#\1' .
                    \ strftime('%c') . '#e'
        let @/=_s
        call histdel('search', -1)
        "call setpos('.', save_cursor)
        call winrestview(pos)
    endif
endfun

cab W  w
cab Wq wq
cab Q  q


" Create a red/red scheme
highlight Problem ctermbg=red guibg=red
" Highlight leading tabs - tab misturado com espaço
match Problem /^\s\*\t\+\s\*/

" Highlight redundant whitespace and tabs.
" This has the advantage of not highlighting each space you type at
" the end of the line, only when you open a file or leave insert
" mode. Very neat."
highlight ExtraWhitespace ctermbg=red guibg=red
au ColorScheme * highlight ExtraWhitespace guibg=red
au BufEnter * match ExtraWhitespace /\s\+$/
au InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
au InsertLeave * match ExtraWhiteSpace /\s\+$/

" remove linhas duplicadas
" remove duplicated lines
" see Preserve function definition
fun! DelBlankFunction()
    let save_cursor = getpos(".")
    let old_query = getreg('/')
    :g/^\n\{2,}/d
    call setpos('.', save_cursor)
    call setreg('/', old_query)
endfun
com! DelBlank call DelBlankFunction()
map <special> <leader>d :keepjumps call DelBlankFunction()<cr>

nmap _= :call Preserve("normal gg=G")<CR>


" Eesta função guarda o local do cursor em 'save_cursor' e como
" executa uma substituição armazena antes o ultimo
" registro de buscas em 'old_query'
fun! CleanExtraSpacesFunction()
    :call Preserve("%s/\\s\\+$//e")
endfun
nmap _$ :call Preserve("%s/\\s\\+$//e")<CR>
com! CleanESpaces call CleanExtraSpacesFunction()

" Utility function that save last search and cursor position
" http://technotales.wordpress.com/2010/03/31/preserve-a-vim-function-that-keeps-your-state/
" video from vimcasts.org: http://vimcasts.org/episodes/tidying-whitespace
function! Preserve(command)
    " Preparation: save last search, and cursor position.
    let save_cursor = getpos(".")
    let old_query = getreg('/')
    execute a:command
    " Clean up: restore previous search history, and cursor position
    call setpos('.', save_cursor)
    call setreg('/', old_query)
endfunction

if has("autocmd")
    autocmd BufWritePre *.txt,*.js,*.py,*.wiki,*.sh :call CleanExtraSpacesFunction()
endif

autocmd BufWritePre * :keepjumps call Preserve(LastModified())
map <silent> <F9> <esc>:call Preserve(LastModified())<cr>
let g:BASH_AuthorName = 'Sergio Luiz Araujo Silva'
let g:BASH_Email = 'voyeg3r at gmail'
let g:BASH_Company = ''

" place holders snippets
" File Templates
" --------------
"  <leader>j jumps to the next marker
" iabbr <buffer> for for <+i+> in <+intervalo+>:<cr><tab><+i+>
function! LoadFileTemplate()
  "silent! 0r ~/.vim/templates/%:e.tmpl
  syn match vimTemplateMarker "<+.\++>" containedin=ALL
  hi vimTemplateMarker guifg=#67a42c guibg=#112300 gui=bold
endfunction

function! JumpToNextPlaceholder()
    let old_query = getreg('/')
    echo search("<+.\\++>")
    exec "norm! c/+>/e\<CR>"
    call setreg('/', old_query)
endfunction
autocmd BufNewFile * :call LoadFileTemplate()
nnoremap <special> <leader>j :keepjumps call JumpToNextPlaceholder()<CR>a
inoremap <special> <leader>j <ESC>:keepjumps call JumpToNextPlaceholder()<CR>a

" The function must be used in a piece of subtitles
" in order to cleyan it, join the lines and put the results
" on clipboard to be pasted on anki
fun! CleanSubtitles()
    let old_query = getreg('/')
    :g/^\(\s\+\)\=\d\+$/d
    :g/^\(\s\+\)\=\d\+.*-->\s\d[^,]*,\d\d\d$/d
    :%j
    :%s/,/, /g
    :%s,\s\+, ,g
    :%y+
    call setreg('/', old_query)
endfun
command! -nargs=0 GetSubs :call CleanSubtitles()

" source: http://ddrscott.github.io/blog/2016/vim-toggle-movement/
function! ToggleHomeZero()
    let pos = getpos('.')
    execute "normal! ^"
    if pos == getpos('.')
        execute "normal! 0"
    endif
endfunction
nnoremap 0 :call ToggleHomeZero()<CR>

" index do vim wiki
let g:vimwiki_list = [{'path': '~/.vim/wiki/', 'index': 'main'}]

" Buble single lines - mover linhas
" http://vimcasts.org/episodes/bubbling-text/
nmap <special> <c-up> ddkP
nmap <special> <c-down> ddp
"buble multiple lines
xmap <c-up> xkP`[V`]
xmap <c-down> xp`[V`]
" se houver um trecho com seleção visual pode-se copiar
" usando Ctrl-c graças ao mapeamento abaixo
xmap <c-c> "+y

set nocompatible
set modeline
set modelines=5
set tabstop=2
set shiftwidth=4
set shiftround
"set copyindent
set softtabstop=4
set expandtab
set encoding=utf-8
set fileencoding=utf-8
set scrolloff=3
"set autoindent
set showmode
set showcmd
set hidden
set wildmenu
set wildmode=list:longest,full
set visualbell
"set cursorline "destaca linha atual
set ttyfast
set ruler
set backspace=indent,eol,start
set laststatus=2
set relativenumber
set number
set undofile
set undodir=~/.vimundo

set ignorecase
set smartcase
set smarttab
"set smartindent
set infercase
set incsearch
set showmatch
set hlsearch
set wrap
set linebreak
set nolist       " list disables linebreak
set autoread      " recarrega arquivos alterados fora do vim

set textwidth=66
"set formatoptions+=a
set formatoptions+=l
set formatoptions+=t
"set formatprg=par\ -w70j
"set colorcolumn=85
"set listchars=tab:▸\ ,eol:¬
set listchars=trail:·,precedes:«,extends:»,eol:↲,tab:▸\
set matchpairs+=<:>

set wildignore+=.hg,.git,.svn           " Version control
set wildignore+=*.aux,*.out,*.toc         " LaTeX intermediate files
set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg  " binary images
set wildignore+=*.jpeg,*.mp3,*.mp4        " binary images
set wildignore+=*.luac              " Lua byte code
set wildignore+=*.o,*.obj,*.exe,*.dll,*.manifest " compiled object files
set wildignore+=*.pyc               " Python byte code
set wildignore+=*.spl               " compiled spelling word lists
set wildignore+=*.sw?               " Vim swap files
set wildignore+=*.DS_Store?            " OSX bullshit

" to reselect use gv in normal mode
nnoremap <S-F11> <ESC>:set hls!<cr>
inoremap <S-F11> <C-o>:set hls!<cr>
vnoremap <S-F11> <ESC>:set hls!<cr> <bar> gv
"nnoremap / :set hls<cr>/

" make copying from visual selection more sane
" source: http://ddrscott.github.io/blog/2016/yank-without-jank/
vnoremap <expr>y "my\"" . v:register . "y`y"
nmap <silent> <F11> :exec &nu==&rnu? "se nu!" : "se rnu!"<CR>

map <BS> X

" the below mapping selects function names
onoremap <silent> F :<C-U>normal! 0f(hviw<CR>

set nopaste
nnoremap <F2> :set invpaste paste?<CR>
set pastetoggle=<F2>
set showmode
" source hacking-vim p-138
nnoremap p p=`]
nnoremap <c-p> p

nnoremap <F5> :GundoToggle<CR>

" move vertically by visual line
nnoremap j gj
nnoremap k gk

" Sudo to write
cmap w!! w !sudo tee % >/dev/null
command! SaveAsRoot w !sudo tee %

" mapping to reload ~/.vimrc
map <silent> <M-v> :source ~/.vimrc<CR>:filetype detect<CR>:exe ":echo 'vimrc reloaded'"<CR>
map <silent> <leader>v :e ~/.vimrc<cr>
map <silent> <leader>z :e ~/.zshrc<cr>

" copy current buffer to clipboard
" nmap <leader>b :%y+<cr>

autocmd! BufWritePost .vimrc source %

nnoremap <leader>w :set wrap! wrap?<cr>

au! VimEnter * match ErrorMsg /^\t\+/
au! VimEnter * match ErrorMsg / $/

" statusline configuration
set statusline=%f
set statusline+=%=
set statusline+=%l
set statusline+=/
set statusline+=%L

nmap n nzz
nmap * *zz
nmap # #zz
nmap g* g*zz
nmap g# g#zz

augroup sh
    au BufNewFile *.sh 0r ~/.vim/skel/template.sh
    au BufNewFile *.sh exe "1," . 10 . "s/Creation Date:.*/Creation Date:    " .strftime("%d-%m-%Y")
    "au BufWritePost *.sh :silent !chmod a+x <afile>
augroup end

augroup zsh "{{{
au BufNewFile *.zsh 0r ~/.vim/skel/template.zsh
au BufNewFile *.zsh exe "1," . 10 . "s/Creation Date:.*/Creation Date:    " .strftime("%d-%m-%Y")
au BufWritePost *.zsh :silent !chmod a+x <afile>
augroup end "}}}

"" autocomandos para python"{{{
augroup python
    au FileType python set keywordprg=pydoc
    au! BufRead *.py setlocal smartindent cinwords=if,elif,else,for,while,try,except,finally,def,class
    au! BufRead,Bufnewfile *.py im :<CR> :<CR><TAB>
    au! BufWritePre *.py,*.js :call <SID>CleanExtraSpacesFunction()
    au! BufNewFile *.py 0r ~/.vim/skel/template.py
    au BufNewFile *.py exe "1," . 10 . "s/Creation Date:.*/Creation Date:    " .strftime("%d-%m-%Y")
    au! BufWritePost *.py :silent !chmod a+x <afile>
    autocmd FileType python set textwidth=79
    autocmd FileType python filetype indent on
    let python_highlight_all=1
    let python_highlight_builtins=0
    let python_highlight_builtins=1
    let python_highlight_exceptions=1
    let python_highlight_numbers=1
    let python_highlight_space_errors=1
augroup end"}}}

augroup html"{{{
" au! <--> Remove all html autocommands
au!
 au BufNewFile,BufRead *.html,*.shtml,*.htm set ft=html
 "au BufNewFile,BufRead,BufEnter  *.html,*.shtml,*.htm so ~/.vim/skel/skel.html
 au BufNewFile *.html 0r ~/.vim/skel/skel.html | let IndentStyle = "html"
 "au BufNewFile *.html,*.shtml,*.htm /body/+
 au BufNewFile,BufRead *.html,*.shtml,*.htm set noautoindent
 au BufNewFile,BufRead *.html,*.shtml,*.htm set nolist
 au BufNewFile,BufRead *.html,*.shtml,*.htm call LastModified()
 " needed one line with 'Created:' in firsts 5 lines
 "au Bufnewfile,BufRead *.html,*.shtml,*.htm 1,5s/\s*Created:\s*\zs.*/\="" . strftime("%Y %b %d %X")/ge
 au BufNewFile,BufRead *.html,*.shtml,*.htm exe "1," . 10 . "s/Creation Date:.*/Creation Date:    " .strftime("%d-%m-%Y")
augroup end"}}}

augroup css"{{{
  au Bufnewfile,BufRead *.css set ft=css
  au BufNewFile *.css 0r ~/.vim/skel/template.css
  autocmd FileType css set omnifunc=csscomplete#CompleteCSS
  "au BufNewFile *.css exe "1," . 10 . "s/Creation Date:.*/Creation Date:    " .strftime("%d-%m-%Y")
  au BufNewFile *.css exe "1," . 10 . "s/Creation Date:.*/Creation Date: " .strftime("%c")
augroup end"}}}

augroup tex"{{{
  au Bufnewfile,BufRead *.tex set ft=tex
  au BufNewFile *.tex 0r ~/.vim/skel/template.tex
  au BufNewFile *.tex exe "1," . 10 . "s/Creation Date:.*/Creation Date: " .strftime("%c")
  vmap e <tab>em<tab>
  vmap ' <tab>'<tab>
  iab latex \LaTeX\
  normal gg
augroup end"}}}

if has("autocmd") && exists("+omnifunc")
 autocmd Filetype *
  \  if &omnifunc == "" |
  \  setlocal omnifunc=syntaxcomplete#Complete |
  \ endif
endif

" um destaque especial para MinhasNotas
highlight MinhasNotas ctermbg=Yellow ctermfg=red guibg=Yellow guifg=red
match MinhasNotas /[Nn]otas\?:\?/

" mapeamento para abrir e fechar folders em modo normal usando
" a barra de espaços -- zR abre todos os folders
nnoremap <space> @=((foldclosed(line('.')) < 0) ? 'zc' : 'zo')<CR>
"nmap <space> :
" para colocar um atalho para abrir e fechar folders faça:
" set foldcolumn=1

" insert blank line before/after
" http://va.mu/Tjvu
nnoremap <silent> [<space> :pu! _<cr>:']+1<cr>
nnoremap <silent> ]<space> :pu _<cr>:'[-1<cr>

if exists('+autochdir')
 set autochdir
else
 autocmd BufEnter * silent! lcd %:p:h:gs/ /\\ /
endif
"autocmd BufEnter * lcd %:p:h

" Uncomment the following to have Vim jump to the last position when
" reopening a file
"if has("autocmd")
"    au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
"endif

au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"" | endif

iab idate <c-r>=strftime("%A %d/%m/%Y")<cr>
iab ihora <c-r>=strftime("%H:%M:%S")<cr>

iab -> →
iab tambem também
iab fro for
iab ,m <voyeg3r  gmail.com>
iab mymail <voyeg3r  gmail.com>
iab slas Sérgio Luiz Araújo Silva
iab vc você
iab teh the
iab a. ª
iab analize análise
iab angulo ângulo
iab apos após
iab apra para
iab aqeule aquele
iab aqiulo aquilo
iab arcoíris arco-íris
iab aré até
iab asim assim
iab aspeto aspecto
iab assenção ascenção
iab assin assim
iab assougue açougue
iab aue que
iab augum algum
iab augun algum
iab ben bem
iab beringela berinjela
iab bon bom
iab cafe café
iab caichote caixote
iab capitões capitães
iab cidadães cidadãos
iab ckaro claro
iab cliche clichê
iab compreenssão compreensão
iab comprensão compreensão
iab comun comum
iab con com
iab contezto contexto
iab corrijir corrigir
iab coxixar cochichar
iab cpm com
iab cppara para
iab dai daí
iab danca dança
iab decer descer
iab definitamente definitivamente
iab deshonestidade desonestidade
iab deshonesto desonesto
iab detale detalhe
iab deven devem
iab díficil difícil
iab distingeu distingue
iab dsa das
iab dze dez
iab ecessão exceção
iab ecessões exceções
iab eentão e então
iab emb bem
iab ems sem
iab emu meu
iab en em
iab enbora embora
iab equ que
iab ero erro
iab erv ver
iab ese esse
iab esselência excelência
iab esu seu
iab excessão exceção
iab Excesões exceções
iab excurção excursão
iab Exenplo exemplo
iab exeplo exemplo
iab exijência exigência
iab exijir exigir
iab expontâneo espontâneo
iab ezemplo exemplo
iab ezercício exercício
iab faciu fácil
iab fas faz
iab fente gente
iab ferias férias
iab geito jeito
iab gibóia jibóia
iab gipe jipe
iab ha há
iab hezitação hesitação
iab hezitar hesitar
iab http:\\ http:
iab iigor igor
iab interesado interessado
iab interese interesse
iab Irria Iria
iab isot isto
iab ítens itens
iab ja já
iab jente gente
iab linguiça lingüiça
iab masi mais
iab maz mas
iab con com
iab mema mesma
iab mes mês
iab muinto muito
iab nao não
iab nehum nenhum
iab nenina menina
iab noã não
iab no. nº
iab N. Nº
iab o. º
iab obiter obter
iab observacao observação
iab ons nos
iab orijem origem
iab ospital hospital
iab poden podem
iab portugu6es português
iab potuguês português
iab precisan precisam
iab própio próprio
iab quado quando
iab quiz quis
iab recizão rescisão
iab sanque sangue
iab sao são
iab sen sem
iab sensivel sensível
iab sequéncia seqüência
iab significatimente significativam
iab sinceranete sinceramente
iab sovre sobre
iab susseder suceder
iab tanbem também
iab testo texto
iab téxtil têxtil
iab tydo tudo
iab tuiter http://www.twitter.com/voyeg3r
iab una uma
iab unico único
iab utilise utilize
iab vega veja
iab vivaotux http://vivaotux.blogspot.com
iab vja veja
iab voc6e você
iab wue que
iab xave chave

iab 1a. 1ª
iab 2a. 2ª
iab 3a. 3ª
iab 4a. 4ª
iab 5a. 5ª
iab 6a. 6ª
iab 7a. 7ª
iab 8a. 8ª
iab 9a. 9ª
iab 10a. 10ª
iab 11a. 11ª
iab 12a. 12ª
iab 13a. 13ª
iab 14a. 14ª
iab 15a. 15ª

" caso o teclado esteja desconfigurado use:
"iab 'a á
"iab 'e é
"iab 'i í
"iab 'o ó
"iab ~a ã
"iab ^a â
"iab `a à
"iab ,c ç
"iab ^e ê
"iab ^o ô
"iab ~o õ
"iab 'u ú
