# #!/bin/zsh
priority 1

snippet zh "zsh header"
#!/usr/bin/env zsh
# Created: `date +%c`
# Last Change: sÃ¡b 31 dez 2016 21:40:41 BRT
# Author: ${1:`!v g:snips_author`}
# Twitter: ${2:`!v g:snips_twitter`}

${0:# press Ctrl-j to jump placeholders}
endsnippet

snippet alias
alias ${1:name}='${2:action}'
endsnippet

snippet lower "lower case var"
${${1:var}:l} ${0:ctrl-j to get here}
endsnippet

snippet galias
alias -g ${1:name}='${2:action}'
endsnippet

snippet usage
usage()
{
    echo "Usage: $(basename $${1:0}) ${2:argument}"
    echo "${3:explanation}"
}
endsnippet

snippet lock
LOCK_FILE=/tmp/.lock
(set -C; :  > $LOCK_FILE) 2> /dev/null
if [  $? != "0" ];  then
    echo "Lock File exists - exiting"
    sleep 1
    exit 1
fi
${0:# press c-j}
endsnippet

snippet ifile "if file exists" w
if [ ! -e ${1:filename}  ]; then
    echo "  file $1 do not exists"
fi
${0}
endsnippet

snippet fun
${1:function_name}() {
${0:#function_body}
}
endsnippet

snippet ir "if user is root" w
if [ "$(id -u)" != "0" ]; then
    echo "  Need be root"
    sleep 2
    exit  1
fi
${0:# Press ctrl-j to jump here}
endsnippet

snippet has
NEEDED_COMMANDS="${1:program}"
missing_counter=0
for needed_command in $NEEDED_COMMANDS; do
    if ! hash "$needed_command" >/dev/null 2>&1; then
        printf "Command not found in PATH: %s\n" "$needed_command" >&2
        ((missing_counter++))
    fi
done
if ((missing_counter > 0)); then
    printf "Minimum %d commands are missing in PATH, aborting" "$missing_counter" >&2
    exit 1
fi
${2}
endsnippet

snippet if "if"
if ${1:condition}; then
	${2:# statements}
fi
endsnippet

snippet ife "ife"
if ${1:condition}; then
	${2:# statements}
else
	${3:# statements}
fi
endsnippet

snippet elif "elif"
elif ${1:condition} ; then
	${2:# statements}
endsnippet

snippet for "for"
for (( ${2:i} = 0; $2 < ${1:count}; $2++ )); do
	${3:# statements}
done
endsnippet

snippet fore "fore"
for ${1:item} in ${2:list}; do
	${3:# statements}
done
endsnippet

snippet wh "wh"
while ${1:condition}; do
	${2:# statements}
done
endsnippet

snippet until "until"
until ${1:condition}; do
	${2:# statements}
done
endsnippet

snippet repeat "repeat"
repeat ${1:integer}; do
	${2:# statements}
done
endsnippet

snippet case "case"
case ${1:word} in
	${2:pattern})
		${3};;
esac
endsnippet

snippet select "select"
select ${1:answer} in ${2:choices}; do
	${3:# statements}
done
endsnippet

snippet ( "("
( ${1:#statements} )
endsnippet

snippet { "{"
{ ${1:#statements} }
endsnippet

snippet [ "["
[[ ${1:test} ]]
endsnippet

snippet always "always"
{ ${1:try} } always { ${2:always} }
endsnippet

snippet fun "fun"
function ${1:name} (${2:args}) {
	${3:# body}
}
endsnippet

snippet array "esay array creation"
local array=( ${1:@} )
${0: ctrl-j}
endsnippet


snippet larray "last array item"
local ${1:last}=${${2:array}[-1]}
${0: ctrl-j}
endsnippet

snippet arrayargs "return array args"
${1:args}=${${2:array}[1,-2]}
${0: ctrl-j}
endsnippet

snippet which "test if program exists"
which ${1:program name}
${0: ctrl-j}
endsnippet
