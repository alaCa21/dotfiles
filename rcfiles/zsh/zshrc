# 10ms for key sequences
KEYTIMEOUT=1


# https://gist.github.com/ctechols/ca1035271ad134841284
# source: https://www.snip2code.com/Snippet/778271/Speed-up-zsh-compinit-by-only-checking-c
# ${ZSH_COMPDUMP}
autoload -Uz compinit
if [[ -n $ZSH_COMPDUMP(#qN.mh+24) ]]; then
	compinit -i d $ZSH_COMPDUMP
else
	compinit -C
fi

# Set name of the theme to load.
# Look in ~/.oh-my-zsh/themes/
# Optionally, if you set this to "random", it'll load a random theme each
# time that oh-my-zsh is loaded.
#ZSH_THEME="agnoster"
#ZSH_THEME="bira"
# ZSH_THEME="pure"
#ZSH_THEME="kphoen"


autoload -Uz promptinit
promptinit
prompt adam2


# User configuration
# export HISTIGNORE="&:ls:[bf]g:exit:reset:clear:cd:cd ..:cd.."
export HISTIGNORE="&:ls:ll:la:l.:pwd:exit:clear:clr:[bf]g"
setopt HIST_IGNORE_DUPS
setopt SHARE_HISTORY
setopt EXTENDED_HISTORY
setopt INC_APPEND_HISTORY
setopt HIST_IGNORE_ALL_DUPS
setopt HIST_IGNORE_SPACE
setopt HIST_REDUCE_BLANKS
setopt HIST_VERIFY
setopt NO_BEEP

setopt COMPLETE_ALIASES # complete aliases before executing
setopt NO_FLOW_CONTROL # deactvates XOFF
setopt INTERACTIVE_COMMENTS # allow inline comments like this one
setopt HIST_VERIFY
setopt PROMPT_BANG # enables '!' substituition on prompt
setopt INC_APPEND_HISTORY
setopt SHARE_HISTORY

setopt COMPLETE_IN_WORD     # Allow completion from within a word/phrase
setopt ALWAYS_TO_END
# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# The optional three formats: "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
ZSH_CUSTOM=${DOTFILES}/rcfiles/zsh/custom

for f in ${DOTFILES}/rcfiles/zsh/functions/*(.N); source $f

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(git fasd extract command-not-found history-substring-search)
plugins+=(zsh-autosuggestions zsh-autopair)

source /home/sergio/.dotfiles/bin/fasd

source $ZSH/oh-my-zsh.sh

# testing completions
# https://github.com/zsh-users/zsh-completions
plugins+=(zsh-completions)


# trying to expand gudo at the begining
bindkey '^i' expand-or-complete-prefix

bindkey '^Xw' expand-word # expande variÃ¡veis

setopt complete_in_word

autoload -U zmv
alias zmv='noglob zmv'
alias zcp='noglob zmv -C'
alias zln='noglob zmv -L'
alias zsy='noglob zmv -Ls'
alias mmv='noglob zmv -W'

# In Zsh ^W removes words delimited by whitespace. We are working in shell here though,
# this should be more fine-grained. I like how it behave in b#ash - slashes,
# dots and few other things are treated as delimiters too. You can achieve this behaviour in Zsh by simply:
autoload -Uz select-word-style
select-word-style bash


# If you end up using a directory as argument,
# this will remove the trailing slash (usefull in ln)
zstyle ':completion:*' squeeze-slashes true

# HISTORY
HISTSIZE=500
SAVEHIST=500
HISTFILE=~/.zsh_history

# Use caching so that commands like apt and dpkg complete are useable
zstyle ':completion:*' accept-exact '*(N)'
zstyle ':completion::complete:*' use-cache on
zstyle ':completion::complete:*' cache-path $ZSH_CACHE_DIR

# Fuzzy matching of completions for when you mistype them:
zstyle ':completion:*' completer _complete _match _approximate
zstyle ':completion:*:match:*' original only
zstyle ':completion:*:approximate:*' max-errors 1 numeric

# And if you want the number of errors allowed by _approximate to
# increase with the length of what you have typed so far:
zstyle -e ':completion:*:approximate:*' \
    max-errors 'reply=($((($#PREFIX+$#SUFFIX)/3))numeric)'

zstyle ':completion:*:*:cd:*' ignored-patterns '(*/|)(CVS|SCCS)'
zstyle ':completion::*:(cvs-add|less|rm|vi):*' ignore-line true
zstyle ':completion:*' ignore-parents parent pwd
zstyle ':completion:*:functions' ignored-patterns '_*'

# completions made case insensitive
#zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'
#zstyle ':completion:*' matcher-list 'r:|[._-]=* r:|=*'
#zstyle ':completion:*' matcher-list 'r:|[._-]=* r:|=*' 'm:{a-zA-Z}={A-Za-z}'

#zstyle ':completion:::::' completer _complete _prefix
#zstyle ':completion::prefix:::' completer _complete
zstyle ':completion::*:::' completer _complete _prefix

zstyle ':completion:*:warnings' format 'Too bad there is nothing'

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# ssh
# export SSH_KEY_PATH="~/.ssh/dsa_id"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.

source $DOTFILES/rcfiles/zsh/aliases

# current_wallpaper=$(gsettings get org.gnome.desktop.background picture-uri | sed 's,file:///,/,g' )

# emacs mode
bindkey -e

autoload -z edit-command-line
zle -N edit-command-line
bindkey "^X^E" edit-command-line
bindkey '^xe' edit-command-line

bindkey '^b' push-line-or-edit
bindkey '\eb' push-line-or-edit

# Grep anywhere with ^G
# don't try to type ^G instead use Ctrl-v Ctrl-g
bindkey -s '' ' | grep '

# getting git status
function _git-status {
zle kill-whole-line
zle -U "git status"
zle accept-line
}
zle -N _git-status
bindkey '\eg' _git-status

# http://jcarreras.es/dotfiles/zsh.html?v1
function up_directory() {
  BUFFER="cd .."
    zle accept-line
}
# Define a widget called "up_directory", mapped to our function above.
zle -N up_directory
# Bind it to ESC-u // Alt-u
bindkey "^[u" up_directory

# history search
# see: http://stackoverflow.com/questions/14040351/filtering-zsh-history-by-command
# function exists { which $1 &> /dev/null }
#
# if exists percol; then
#      function percol_select_history() {
#          local tac
#          exists gtac && tac="gtac" || { exists tac && tac="tac" || { tac="tail -r" } }
#          BUFFER=$(fc -l -n 1 | eval $tac | percol --query "$LBUFFER")
#          CURSOR=$#BUFFER         # move cursor
#          zle -R -c               # refresh
#      }
#
#      zle -N percol_select_history
#      bindkey '^R' percol_select_history
# fi

# # define widget function
# function cursor-after-first-word {
#     zle up-history
#     zle beginning-of-line
#     zle forward-word
#     RBUFFER=" $RBUFFER"
# }
# create widget from function
#zle -N cursor-after-first-word
# bind widget to ESC-o
#bindkey '^[o' cursor-after-first-word

# Inserts 'sudo ' at the beginning of the line.
stty ixany

# function prepend-sudo {
#   if [[ "$BUFFER" != su(do|)\ * ]]; then
#     BUFFER="sudo $BUFFER"
#     (( CURSOR += 5 ))
#   fi
# }
# zle -N prepend-sudo
# bindkey '^Xs' prepend-sudo

bindkey "^R" history-incremental-pattern-search-backward
bindkey "^S" history-incremental-pattern-search-forward

# source: http://goo.gl/HUXBjG
globalias() {
    if [[ $LBUFFER =~ ' [A-Z0-9]+$' ]]; then
        zle _expand_alias
        zle expand-word
    fi
    zle self-insert
}
zle -N globalias

bindkey ' ' globalias                # expande aliases globais
bindkey '^X ' magic-space            # control-space to bypass completion
#bindkey -M isearch " " magic-space  # normal space during searches
#bindkey -s '\eu' 'cd ..^j' # alt-u up dir

# source: http://stackoverflow.com/questions/171563/whats-in-your-zshrc
# I often build elaborate commands step by step: I run a command,
# see I need a different option, then use the output of the same
# command within # $() (the portable version of backquotes) in a
# for loop or something. The following snippet makes alt-E (I
# should probably write meta-E?) insert the previous line
# between $().

# quote pasted URLs
# it seems kind of uncompatible with substring-search
autoload -Uz url-quote-magic
zle -N self-insert url-quote-magic
autoload -Uz bracketed-paste-magic
zle -N bracketed-paste bracketed-paste-magic

# in order to install auto-suggestions plugin
# https://github.com/zsh-users/zsh-autosuggestions
# this key binding must be here at the end because of something I dont know yet
bindkey '^ ' autosuggest-accept

bindkey '^X^A' fasd-complete
bindkey '^X^F' fasd-complete-f
bindkey '^X^D' fasd-complete-d

# http://stackoverflow.com/a/13614816/2571881
# very very useful
autoload -Uz history-beginning-search-menu
zle -N history-beginning-search-menu
bindkey '' history-beginning-search-menu

