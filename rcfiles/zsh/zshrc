# Path to your oh-my-zsh installation.
export ZSH="${HOME}/.dotfiles/oh-my-zsh"

XDG_CONFIG_HOME="$HOME/.config"
XDG_CACHE_HOME="$HOME/.cache"

ZSH_CONFIG=~/.dotfiles/rcfiles/zsh

# 10ms for key sequences
KEYTIMEOUT=1

# Set name of the theme to load.
# Look in ~/.oh-my-zsh/themes/
# Optionally, if you set this to "random", it'll load a random theme each
# time that oh-my-zsh is loaded.
#ZSH_THEME="agnoster"
ZSH_THEME="bira"

setopt NO_FLOW_CONTROL # deactvates XOFF
setopt COMPLETE_ALIASES
setopt INTERACTIVE_COMMENTS # allow inline comments like this one
# allow inline comments like this one
setopt HIST_VERIFY
setopt PROMPT_BANG # enables '!' substituition on prompt
setopt INC_APPEND_HISTORY
setopt SHARE_HISTORY

setopt COMPLETE_IN_WORD     # Allow completion from within a word/phrase
setopt ALWAYS_TO_END
# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# The optional three formats: "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
ZSH_CUSTOM=${HOME}/.dotfiles/rcfiles/zsh/custom

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(git fasd extract systemd.plugin.zsh history-substring-search zsh-autosuggestions)
#eval "$(fasd --init posix-alias zsh-hook )"
eval "$(fasd --init posix-alias zsh-hook zsh-ccomp zsh-ccomp-install zsh-wcomp zsh-wcomp-install )"

# trying to expand sudo at the begining
bindkey '^i' expand-or-complete-prefix

# in order to install auto-suggestions plugin
# https://github.com/zsh-users/zsh-autosuggestions
bindkey '^ ' autosuggest-accept

bindkey '^Xw' expand-word # expande vari√°veis

for f in $HOME/.dotfiles/rcfiles/zsh/functions/*(.N); source $f

# testing completions
# https://github.com/zsh-users/zsh-completions
plugins+=(zsh-completions)
plugins+=(python)
autoload -U compinit && compinit

setopt complete_in_word

autoload -U zmv
alias mmv='noglob zmv -W'

# In Zsh ^W removes words delimited by whitespace. We are working in shell here though,
# this should be more fine-grained. I like how it behave in b#ash - slashes,
# dots and few other things are treated as delimiters too. You can achieve this behaviour in Zsh by simply:
autoload -U select-word-style
select-word-style bash

# User configuration
export HISTIGNORE="&:ls:[bf]g:exit:reset:clear:cd:cd ..:cd.."
setopt HIST_IGNORE_DUPS
setopt EXTENDED_HISTORY
setopt INC_APPEND_HISTORY
setopt HIST_IGNORE_ALL_DUPS
setopt HIST_IGNORE_SPACE
setopt HIST_REDUCE_BLANKS
setopt HIST_VERIFY


source $ZSH/oh-my-zsh.sh

# If you end up using a directory as argument,
# this will remove the trailing slash (usefull in ln)
zstyle ':completion:*' squeeze-slashes true

# HISTORY
HISTSIZE=10000
SAVEHIST=9000
HISTFILE=~/.zsh_history

# Use caching so that commands like apt and dpkg complete are useable
zstyle ':completion::complete:*' use-cache on
zstyle ':completion::complete:*' cache-path $ZSH_CACHE_DIR

# Fuzzy matching of completions for when you mistype them:
zstyle ':completion:*' completer _complete _match _approximate
zstyle ':completion:*:match:*' original only
zstyle ':completion:*:approximate:*' max-errors 1 numeric

# And if you want the number of errors allowed by _approximate to
# increase with the length of what you have typed so far:
zstyle -e ':completion:*:approximate:*' \
    max-errors 'reply=($((($#PREFIX+$#SUFFIX)/3))numeric)'


zstyle ':completion:*:*:cd:*' ignored-patterns '(*/|)(CVS|SCCS)'
zstyle ':completion::*:(cvs-add|less|rm|vi):*' ignore-line true
zstyle ':completion:*' ignore-parents parent pwd
zstyle ':completion:*:functions' ignored-patterns '_*'

# completions made case insensitive
#zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'
#zstyle ':completion:*' matcher-list 'r:|[._-]=* r:|=*'
#zstyle ':completion:*' matcher-list 'r:|[._-]=* r:|=*' 'm:{a-zA-Z}={A-Za-z}'

#zstyle ':completion:::::' completer _complete _prefix
#zstyle ':completion::prefix:::' completer _complete
zstyle ':completion::*:::' completer _complete _prefix


zstyle ':completion:*:warnings' format 'Too bad there is nothing'

ZSH_CACHE_DIR=${HOME}/.zsh.d/cache
mkdir -p ${ZSH_CACHE_DIR}


# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# ssh
# export SSH_KEY_PATH="~/.ssh/dsa_id"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.

source ~/.dotfiles/rcfiles/zsh/aliases

# emacs mode
bindkey -e

autoload -z edit-command-line
zle -N edit-command-line
bindkey "^X^E" edit-command-line
bindkey '^xe' edit-command-line

bindkey '^b' push-line-or-edit
bindkey '\eb' push-line-or-edit

insert-history-line() {
LBUFFER="$LBUFFER\$(${history[$((HISTNO-1))]})"
}
zle -N insert-history-line insert-history-line
bindkey '^[e' insert-history-line

insert-history-line() {
LBUFFER="$LBUFFER\$(${history[$((HISTNO-1))]})"
}
zle -N insert-history-line insert-history-line
bindkey '^[e' insert-history-line

# getting git status
function _git-status {
zle kill-whole-line
zle -U "git status"
zle accept-line
}
zle -N _git-status
bindkey '\eg' _git-status

# strg+x,s adds sudo to the line
# Zsh Buch p.159 - http://zshbuch.org/
run-with-sudo() { LBUFFER="sudo $LBUFFER" }
zle -N run-with-sudo
bindkey '^Xs' run-with-sudo

bindkey "^R" history-incremental-pattern-search-backward
bindkey "^S" history-incremental-pattern-search-forward

# source: http://goo.gl/HUXBjG
globalias() {
    if [[ $LBUFFER =~ ' [A-Z0-9]+$' ]]; then
        zle _expand_alias
        zle expand-word
    fi
    zle self-insert
}

zle -N globalias

bindkey ' ' globalias               # expande aliases globais
bindkey '^X ' magic-space           # control-space to bypass completion
bindkey -M isearch " " magic-space  # normal space during searches
bindkey -s '\eu' 'cd ..^j' # alt-u up dir

# source: http://stackoverflow.com/questions/171563/whats-in-your-zshrc
# I often build elaborate commands step by step: I run a command,
# see I need a different option, then use the output of the same
# command within # $() (the portable version of backquotes) in a
# for loop or something. The following snippet makes alt-E (I
# should probably write meta-E?) insert the previous line
# between $().

insert-history-line() {
    LBUFFER="$LBUFFER\$(${history[$((HISTNO-1))]})"
}
zle -N insert-history-line insert-history-line
bindkey '^[e' insert-history-line

# quote pasted URLs
# it seems kind of uncompatible with substring-search
autoload -Uz url-quote-magic
zle -N self-insert url-quote-magic
autoload -Uz bracketed-paste-magic
zle -N bracketed-paste bracketed-paste-magic

# firefox improviments
# disalbe rendering fonts in firefox to free memory
export MOZ_DISABLE_PANGO='1'
