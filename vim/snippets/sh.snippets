# Shebang. Executing bash via /usr/bin/env makes scripts more portable.
snippet #!
	#!/usr/bin/env bash
	# Created: `system("date +%m-%d-%Y")`
	# Last Change:
	# Author: ${1:`g:snips_author`}
	# Twitter: ${2:`g:snips_twitter`}
	${0:# press Ctrl-j to jump placeholders}

snippet sh
	#!/usr/bin/env bash
	# Criado em: `system("date +%m-%d-%Y")`
	# Last Change: Sun May 03, 2015  09:09AM
	# vim:ft=sh:fdm=syntax:nu:
	# Instituicao: ${1:instituicao}
	# Proposito do script: ${2:write here the script purpose}
	# Autor: ${3:`g:snips_author`}
	# site: ${4:`g:snips_site`}
	${0:# press Ctrl-j to jump placeholders}

snippet has
	NEEDED_COMMANDS="${1:program}"
	missing_counter=0
	for needed_command in $NEEDED_COMMANDS; do
		if ! hash "$needed_command" >/dev/null 2>&1; then
			printf "Command not found in PATH: %s\n" "$needed_command" >&2
			((missing_counter++))
		fi
	done
	if ((missing_counter > 0)); then
		printf "Minimum %d commands are missing in PATH, aborting" "$missing_counter" >&2
		exit 1
	fi
	${2}

snippet ir "if user is root" w
	if [ "$(id -u)" != "0" ]; then
	echo "  Need be root"
		sleep 2
		exit  1
	fi
	${0:# Press ctrl-j to jump here}

snippet if
	if [[ ${1:condition} ]]; then
		${0:#statements}
	fi
snippet elif
	elif [[ ${1:condition} ]]; then
		${0:#statements}
snippet for
	for (( ${2:i} = 0; $2 < ${1:count}; $2++ )); do
		${0:#statements}
	done
snippet fori
	for ${1:needle} in ${2:haystack} ; do
		${0:#statements}
	done
snippet wh
	while [[ ${1:condition} ]]; do
		${0:#statements}
	done
snippet until
	until [[ ${1:condition} ]]; do
		${0:#statements}
	done
snippet case
	case ${1:word} in
		${2:pattern})
		${0};;
	esac
snippet go
	while getopts '${1:o}' ${2:opts}
	do
		case $$2 in
			${3:o0})
			${0:#staments};;
		esac
	done
# Set SCRIPT_DIR variable to directory script is located.
snippet sdir
	SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
snippet root
	if [ \$(id -u) -ne 0 ]; then exec sudo \$0; fi
snippet fun
	${1:function_name}() {
		${0:#function_body}
	}
snippet ffun
	function ${1:function_name}() {
		${0:#function_body}
	}

snippet replay "get yes or no from user" w
	read -p "Type one response [y|n]:" response
	if [[ "${response,,}" =~ ^[^y] ]];then
		exit 0
	fi
	${0:# press c-j}

snippet ifile "if file exists" w
	if [ ! -e ${1:filename}  ]; then
		echo "  file $1 do not exists"
	fi

	${0}

snippet isempty "if file is empty" w
	[ -f "${1:filename}" -a ! -s "$1" ] && echo "$1 is empty'!'"
	${0:# press c-j to exit snippet}

snippet ifdir "test if dir exists" w
	[ -d ${1:namedir} ] || mkdir $1 ; cd $1
	${0:# press c-j}

snippet "ifprog(ram)?" "test if program is installed" r
	command -v ${1:prog} >/dev/null || sudo pacman -S $1
	${0:# press c-j}

snippet lock
	LOCK_FILE=/tmp/.lock
	(set -C; :  > $LOCK_FILE) 2> /dev/null
	if [  $? != "0" ];  then
		echo "Lock File exists - exiting"
		sleep 1
		exit 1
	fi
	${0:# press c-j}

snippet lower
	${1:var}=${$1,,}
	${0:#press ctrl-j}
snippet upper
	${1:var}=${$1^^}
	${0:#press ctrl-j}

snippet array
	#ARRAY=( 'Debian Linux' 'Redhat Linux' Ubuntu Linux )
	# get number of elements in the array
	ELEMENTS=${#ARRAY[@]}
	for (( i=0;i<$ELEMENTS;i++)); do
		${1:echo} ${ARRAY[${i}]}
	done
	${0:# press ctrl-j}

snippet alias
	alias ${1:name}='${2:action}'

snippet usage
	usage()
	{
		echo "Usage: $(basename $${1:0}) ${2:argument}"
		echo "${3:explanation}"
	}

# sets default var
snippet dvar
	MYVAR=${1:{1:-default}}
